`timescale 1ns / 1ps

module pipe_MIPS32_TB();

reg clk1, clk2;

pipe_MIPS32 uut (clk1, clk2);

// Clock Generation
initial
begin
    clk1 = 0; clk2 = 0;
    forever begin
        #5 clk1 = ~clk1;   // 10ns period for clk1
        #5 clk2 = ~clk2;   // 10ns period for clk2
    end
end

// Initialize and Run
initial
begin
    // Initialize Memory with instruction

    // Assume Reg[1] = 5, Reg[2] = 10
    uut.Reg[1] = 5;
    uut.Reg[2] = 10;

    // Load 
    // ADD R3, R1, R2   (R3 = R1 + R2)
    uut.Mem[0] = {6'b000000, 5'd1, 5'd2, 5'd3, 11'd0}; // ADD

    // SUB R4, R2, R1   (R4 = R2 - R1)
    uut.Mem[1] = {6'b000001, 5'd2, 5'd1, 5'd4, 11'd0}; // SUB

    // HLT
    uut.Mem[2] = {6'b111111, 26'd0}; // HLT

    // Wait some time
    #200; // Run simulation for 200ns

    // Display Register contents
    $display("Register values after execution:");
    $display("R1 = %d", uut.Reg[1]);
    $display("R2 = %d", uut.Reg[2]);
    $display("R3 = %d", uut.Reg[3]);
    $display("R4 = %d", uut.Reg[4]);

    // End simulation
    $finish;
end

endmodule
